/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/wbd.js":
/*!********************!*\
  !*** ./src/wbd.js ***!
  \********************/
/***/ (() => {

eval("function dropdown() {\n  //dropdown for wells\n  var select = d3.select(\"#wellselect\");\n  d3.json(\"../data/datawbd/wells.json\").then((alldata) => {\n    wellname = [];\n    alldata.forEach((i) => {\n      wellname.push(i[0]);\n    });\n    wells = [...new Set(wellname)].sort();\n    wells.forEach((i) => {\n      select.append(\"option\").text(i).property(\"Value\", i);\n    });\n  });\n}\ndropdown();\n\nlet changesign = (x) => {\n  //switches signs in array\n  x.forEach((el, i) => {\n    x[i] *= -1;\n  });\n};\n\nasync function plot() {\n  \n  const dropdownMenu = d3.select(\"#wellselect\").node();\n  let wellName = dropdownMenu.value;//Title of the well\n  let selectedOption = dropdownMenu.value; //gives wellname chosen\n  if(selectedOption == \"default\"){\n    selectedOption = \"Aaron #1\";\n    wellName = \"Aaron #1\";\n  };\n  selectedOption = selectedOption.replace(\" \", \"\");\n  selectedOption = selectedOption.replace(\"#\", \"\");\n  async function getData(j) {\n    let bore = new d3.csv(\"../data/datawbd/\" + selectedOption + j + \".csv\").then(\n      (data) => {\n        //reads csv file\n        DataTVD = [];\n        DataN = [];\n        DataE = [];\n        data.forEach(function (d) {\n          d.TVD = parseInt(d.TVD);\n          d.Easting = parseInt(d.Easting);\n          d.Northing = parseInt(d.Northing);\n        });\n        for (i in data) {\n          //seperate data into arrays\n          DataTVD.push(data[i].TVD);\n          DataE.push(data[i].Easting);\n          DataN.push(data[i].Northing);\n        }\n\n        changesign(DataTVD);\n        return [DataTVD, DataN, DataE];\n      }\n    );\n    let promise = await bore;\n    return promise;\n  }\n  async function getShowData(j) {\n    let show = new d3.csv(\n      \"../data/datawbd/\" + selectedOption + \"show\" + j + \".csv\"\n    ).then((showData) => {\n      showDataTVD = [];\n      showDataN = [];\n      showDataE = [];\n      for (i in showData) {\n        //seperate data into arrays\n        showDataTVD.push(showData[i].TVD);\n        showDataE.push(showData[i].Easting);\n        showDataN.push(showData[i].Northing);\n      }\n      changesign(showDataTVD);\n      return [showDataTVD, showDataN, showDataE];\n    });\n    let prom = await show;\n    return prom;\n  }\n  let data1 = await getData(1); //waits for data from each wellbore(diff csv files)\n  let data2 = await getData(2);\n  let data3 = await getData(3);\n  let data4 = await getData(4);\n  let data5 = await getData(5);\n\n  let allDataE = [data1[2], data2[2], data3[2], data4[2], data5[2]];\n  let allDataN = [data1[1], data2[1], data3[1], data4[1], data5[1]];\n  let allDataTVD = [data1[0], data2[0], data3[0], data4[0], data5[0]];\n\n  let visibility3,\n    visibility4,\n    visibility5 = true;\n  if (data3[1][0] == null) {\n    visibility3 = false;\n  }\n  if (data4[1][0] == null) {\n    visibility4 = false;\n  }\n  if (data5[1][0] == null) {\n    visibility5 = false;\n  }\n  let maxE = d3.max(allDataE, (d) => {\n    return d3.max(d);\n  });\n  let maxN = d3.max(allDataN, (d) => {\n    return d3.max(d);\n  });\n  let minE = d3.min(allDataE, (d) => {\n    return d3.min(d);\n  });\n  let minN = d3.min(allDataN, (d) => {\n    return d3.min(d);\n  });\n  let minTVD = d3.min(allDataTVD, (d) => {\n    return d3.min(d);\n  });\n\n  const scale = 1000;\n\n  let layout = {\n    width: 1620,\n    height: 780,\n\n    margin: {\n      l: 0,\n      r: 0,\n      b: 0,\n      t: 0,\n    },\n\n    title: {\n      text: \"Drilling for \" + wellName + \", Dimmit County, TX\",\n      y: 0.98,\n    },\n\n    legend: {\n      x: 0.8,\n      y: 0.8,\n    },\n    scene: {\n      aspectmode: \"cube\",\n      xaxis: {\n        title: \"Easting\",\n        nticks: 8,\n        range: [minE - scale, maxE + scale],\n        gridcolor: \"#8a8a8a\",\n        tickcolor: \"#050505\",\n        backgroundcolor: \"#ededed\",\n        showbackground: true,\n      },\n      yaxis: {\n        title: \"Northing\",\n        nticks: 8,\n        range: [minN - scale, maxN + scale],\n        gridcolor: \"#8a8a8a\",\n        tickcolor: \"#050505\",\n        backgroundcolor: \"#f0f1f2\",\n        showbackground: true,\n      },\n      zaxis: {\n        title: \"TVD\",\n        nticks: 5,\n        range: [minTVD - scale * 0.5, -3000],\n        gridcolor: \"#8a8a8a\",\n        tickcolor: \"#050505\",\n        backgroundcolor: \"#ededed\",\n        showbackground: true,\n      },\n    },\n  };\n  let alldata = [\n    {\n      opacity: 0.8,\n      mode: \"lines\",\n      name: \"Orginal Hole\",\n      line: {\n        width: 6,\n        color: \"#1d6acf\",\n      },\n      type: \"scatter3d\",\n\n      x: data1[2],\n      y: data1[1],\n      z: data1[0],\n    },\n    {\n      opacity: 0.8,\n      mode: \"lines\",\n      name: \"Side Track 1\",\n      line: {\n        width: 6,\n        color: \"#eb7a10\",\n      },\n      type: \"scatter3d\",\n\n      x: data2[2],\n      y: data2[1],\n      z: data2[0],\n    },\n    {\n      opacity: 0.8,\n      mode: \"lines\",\n      name: \"Side Track 2\",\n      line: {\n        width: 6,\n        color: \"#d61515\",\n      },\n      type: \"scatter3d\",\n      visible: visibility3,\n      x: data3[2],\n      y: data3[1],\n      z: data3[0],\n    },\n    {\n      opacity: 0.8,\n      mode: \"lines\",\n      name: \"Side Track 3\",\n      line: {\n        width: 6,\n        color: \"#000000\",\n      },\n      type: \"scatter3d\",\n      color: \"red\",\n      visible: visibility4,\n      x: data4[2],\n      y: data4[1],\n      z: data4[0],\n    },\n    {\n      opacity: 0.8,\n      mode: \"lines\",\n      name: \"Side Track 4\",\n      line: {\n        width: 6,\n        color: \"#345223\",\n      },\n      type: \"scatter3d\",\n      visible: visibility5,\n      x: data5[2],\n      y: data5[1],\n      z: data5[0],\n    },\n  ];\n\n  try {\n    let showData1 = await getShowData(1);\n    let showData2 = await getShowData(2);\n    let allBoreData = [data1, data2, data3, data4, data5];\n    let allShowData = [showData1, showData2];\n    graphShow(allBoreData, allShowData, layout);\n  } catch (err) {\n    console.log(err);\n    graph();\n  }\n\n  async function graph() {\n    graphDiv = document.getElementById(\"graph\");\n    Plotly.newPlot(\"graph\", alldata, layout);\n  }\n  async function graphShow(allBoreData, allShowData) {\n    showData = [\n      {\n        opacity: 0.8,\n        mode: \"markers\",\n        marker: {\n          size: 4,\n          color: \"#008000\",\n        },\n        type: \"scatter3d\",\n\n        x: allShowData[0][2],\n        y: allShowData[0][1],\n        z: allShowData[0][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"markers\",\n        marker: {\n          size: 4,\n          color: \"#008000\",\n        },\n        type: \"scatter3d\",\n\n        x: allShowData[1][2],\n        y: allShowData[1][1],\n        z: allShowData[1][0],\n      },\n    ];\n\n    allBoreData = [\n      {\n        opacity: 0.8,\n        mode: \"lines\",\n        line: {\n          width: 6,\n          color: \"#A52A2A\",\n        },\n        type: \"scatter3d\",\n\n        x: allBoreData[0][2],\n        y: allBoreData[0][1],\n        z: allBoreData[0][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"lines\",\n        line: {\n          width: 6,\n          color: \"#DC143C\",\n        },\n        type: \"scatter3d\",\n\n        x: allBoreData[1][2],\n        y: allBoreData[1][1],\n        z: allBoreData[1][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"lines\",\n        line: {\n          size: 2,\n          color: \"#D2691E\",\n        },\n        type: \"scatter3d\",\n\n        x: allBoreData[2][2],\n        y: allBoreData[2][1],\n        z: allBoreData[2][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"lines+markers\",\n        marker: {\n          size: 2,\n          color: \"#FF7F50\",\n        },\n        type: \"scatter3d\",\n\n        x: allBoreData[3][2],\n        y: allBoreData[3][1],\n        z: allBoreData[3][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"lines\",\n        marker: {\n          size: 2,\n          color: \"#E9967A\",\n        },\n        type: \"scatter3d\",\n\n        x: allBoreData[4][2],\n        y: allBoreData[4][1],\n        z: allBoreData[4][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"markers\",\n        marker: {\n          size: 4,\n          color: \"#008000\",\n        },\n        type: \"scatter3d\",\n\n        x: allShowData[0][2],\n        y: allShowData[0][1],\n        z: allShowData[0][0],\n      },\n      {\n        opacity: 0.8,\n        mode: \"markers\",\n        marker: {\n          size: 4,\n          color: \"#008000\",\n        },\n        type: \"scatter3d\",\n\n        x: allShowData[1][2],\n        y: allShowData[1][1],\n        z: allShowData[1][0],\n      },\n    ];\n\n    Plotly.newPlot(\"graph\", allBoreData, layout);\n  }\n}\n\n//d3.select(\"#wellselect\").on('change', function() {files()});\nd3.select(\"#wellselect\").on(\"change\", function () {\n  plot();\n});\n\n//init page on load//\n$(window).on(\"load\",function () {plot();});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/wbd.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/wbd.js"]();
/******/ 	
/******/ })()
;