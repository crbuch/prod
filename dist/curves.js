/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/curves.js":
/*!***********************!*\
  !*** ./src/curves.js ***!
  \***********************/
/***/ (() => {

eval("console.log(\"in curves.js\")\n//dyn underline active buttons//\nfunction setActive(view, time) {\n  var elems = document.querySelectorAll(\".active\");\n  [].forEach.call(elems, (el) => {\n    el.classList.remove(\"active\");\n  });\n  document.getElementById(view).className += \"active\";\n  document.getElementById(time).className += \"active\";\n}\nfunction setActiveTime(time) {\n  var elems = document.querySelectorAll(\".active\");\n  [].forEach.call(elems, (el) => {\n    //console.log('el.id :>> ', el.id);\n    if (el.id.includes(\"Days\")) {\n      el.classList.remove(\"active\");\n    }\n  });\n  document.getElementById(time).className += \"active\";\n}\n\n//Creates Dropdown//\nfunction createDropdownOptions() {\n  var partnerSelector = d3.select(\"#siteSelection\"); //SELECT <select> WHERE PARTNER NAMES WILL APPEAR, find id:siteselection in curves.html\n  let region = document.getElementById(\"region\") // ET ST(blank)\n  d3.json(\"../data/allProductionData\"+region+\".json\").then((allData) => {\n    //READ IN JSON FILE COINTAING ALL PARTNER'S NAMES\n    repeatedWells = []; //EMPTY ARRAY TO CONTAIN ALL PARTNER'S NAME (REPEATED)\n    allData.forEach((row) => {\n      //LOOP THROUGH NET_INTEREST FILE, calls method element in array: array.foreach(function)\n      repeatedWells.push(row[0]); //PUSH ALL PARTNER'S NAME TO LIST\n    });\n\n    wells = [...new Set(repeatedWells)].sort(); //CREATE A UNIQUE LIST OF ALL WELLS AND SORT\n    wells.forEach((well) => {\n      //FOR EACH OF THE UNIQUE WELLS, CREATE AN OPTION FOR THE DROP DOWN\n      partnerSelector.append(\"option\").text(well).property(\"Value\", well);\n    });\n  });\n}\n\n//Creates Graphs//\nfunction Curve(timeFrame) {\n  let region = document.getElementById(\"region\").textContent // ET ST\n  \n  if (region == null) {\n    region = 'ET'\n    console.log(\"text con\",region)\n  }\n\n  if (d3.select(\"#siteSelection\").node().value != \"default\") {\n    //clicked on well in dropdown\n    let dropdownMenu = d3.select(\"#siteSelection\").node();\n    selectedOption = dropdownMenu.value;\n    sessionStorage.removeItem(\"siteSelection\");\n  } else if (sessionStorage.getItem(\"siteSelection\") != null) {\n    //redirected from anaylze\n    selectedOption = sessionStorage.getItem(\"siteSelection\");\n  } else if (\n    sessionStorage.getItem(\"siteSelection\") == null &&\n    d3.select(\"#siteSelection\").node().value == \"default\" &&\n    region == \"ET\"\n  ) {\n    //first time loading ETpage\n    selectedOption = \"Beal #1\";\n  } else if (\n    sessionStorage.getItem(\"siteSelection\") == null &&\n    d3.select(\"#siteSelection\").node().value == \"default\"\n  ){\n    //first time loading STpage\n    selectedOption = \"Aaron #1\";\n  }\n\n  document.querySelectorAll(\".active\").forEach((el) => {\n    if (el.id == \"linear\") {\n      scale = \"linear\";\n    } else if (el.id == \"logarithmic\") {\n      scale = \"log\";\n    }\n  });\n\n  document.getElementById(\"zoomOil\").style.visibility = \"hidden\"; //dont display old zoom data if switching b/t wells/timeframes\n\n  document.getElementById(\"wellName\").innerHTML = selectedOption;\n\n  var hidetable = document.getElementById(\"individualTable\");\n  hidetable.style.display = \"none\";\n  \n  document.getElementById(\"oilDeclineCurve\").style.display = \"block\"\n  document.getElementById(\"gasDeclineCurve\").style.display = \"block\"\n  document.getElementById(\"waterDeclineCurve\").style.display = \"block\"\n  document.getElementById(\"waterCutCurve\").style.display = \"block\"\n\n  //HIDE PUMPING INFO  SINCE THEY WILL BE SHOWING FROM PREVIOUS SELECTION\n  if (region != \"ET\"){\n    var previousPumpInfo = document.getElementById(\"pumpInfo\");\n    previousPumpInfo.style.display = \"none\";\n\n    var previousNotPumpingInfo = document.getElementById(\"notPumpingInfo\");\n    previousNotPumpingInfo.style.display = \"none\";\n\n    // \"CLEANING\" PUMP INFO TEXT FOR NEXT SELECTION\n    document.getElementById(\"c\").innerHTML = \"\";\n    document.getElementById(\"SPM\").innerHTML = \"\";\n    document.getElementById(\"DHSL\").innerHTML = \"\";\n    document.getElementById(\"ideal\").innerHTML = \"\";\n    document.getElementById(\"pumpEff\").innerHTML = \"\";\n    document.getElementById(\"pumpDepth\").innerHTML = \"\";\n    document.getElementById(\"GFLAP\").innerHTML = \"\";\n    document.getElementById(\"Inc\").innerHTML = \"\";\n    document.getElementById(\"notPumping\").innerHTML = \"\";\n\n\n  }\n  \n\n  d3.json(\"../data/pumpInfo.json\").then((pumpData) => {\n    var pumpingInfoToShow = {\n      \"Well Name\": \"doesn'scale exist because it is not pumping\",\n    };\n    pumpData.forEach((pumpingWell) => {\n      if (pumpingWell[\"Well Name\"].includes(selectedOption)) {\n        pumpingInfoToShow = pumpingWell;\n      }\n    });\n    if (\n      pumpingInfoToShow[\"Well Name\"].includes(selectedOption) &&\n      pumpingInfoToShow[\"SPM\"] !== 0\n    ) {\n      //USED jQuery LIBRARY TO TOGGLE THE DISPLAY OF #pumpInfo\n      $(document).ready(function () {\n        $(\"#pumpInfo\").toggle();\n      });\n      //SHOW HIDDEN BUTTONS\n      if (region != \"ET\"){\n        document.getElementById(\"c\").innerHTML = \"C: \" + pumpingInfoToShow[\"C\"];\n        document.getElementById(\"SPM\").innerHTML =\n          \"SPM: \" + pumpingInfoToShow[\"SPM\"];\n        document.getElementById(\"DHSL\").innerHTML =\n          \"DH SL: \" + pumpingInfoToShow[\"DH SL\"];\n        document.getElementById(\"ideal\").innerHTML =\n          \"Ideal bfpd: \" + pumpingInfoToShow[\"Ideal bfpd\"];\n        document.getElementById(\"pumpEff\").innerHTML =\n          \"Pump Eff: \" + pumpingInfoToShow[\"Pump Eff\"]; //multiply by 100\n        document.getElementById(\"pumpDepth\").innerHTML =\n          \"Pump Depth: \" + pumpingInfoToShow[\"Pump Depth\"];\n        document.getElementById(\"GFLAP\").innerHTML =\n          \"GFLAP: \" + pumpingInfoToShow[\"GFLAP\"];\n        document.getElementById(\"Inc\").innerHTML =\n          \"Inc: \" + pumpingInfoToShow[\"Inc\"];\n\n      }\n      \n    } else {\n      $(document).ready(function () {\n        $(\"#notPumpingInfo\").toggle();\n        $(\"#notPumping\").html(\"This well is not pumping\");\n      });\n    }\n  });\n  //READ IN ECONOMICS DATA\n  d3.json(\"../data/economics.json\").then((economicsData) => {\n    //console.log(economicsData[0])\n    var wellRMPL = 0;\n    var wellYTDPL = 0;\n    monthPnL = \"\";\n    console.log(economicsData);\n    economicsData.forEach((ecoWell) => {\n      if (ecoWell[\"Well Name\"].includes(selectedOption)) {\n        wellRMPL = ecoWell[\"Recent Month P&L\"];\n        wellYTDPL = ecoWell[\"YTD P&L\"];\n        monthPnL = ecoWell[\"Date\"].slice(0, 3);\n      }\n    });\n    //DISPLAY ECONOMICS DATA\n    if (region != \"ET\"){\n      document.getElementById(\"pnl\").innerHTML =\n      \"P&L : \" +\n      \"$\" +\n      wellRMPL\n        .toFixed(0)\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") +\n      \" \" +\n      monthPnL;\n      //document.getElementById(\"monthly\").innerHTML = \"$\"+ wellRMPL.toLocaleString(\"en-US\")+\" \"+ monthPnL;\n      document.getElementById(\"YTD\").innerHTML =\n        \"$\" +\n        wellYTDPL\n          .toFixed(0)\n          .toString()\n          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") +\n        \" YTD\";\n\n    }\n    \n  });\n\n  //READ IN PAYOUT DATA\n  d3.json(\"../data/payouts.json\").then((payoutsData) => {\n    var payout100 = 0;\n    payoutsData.forEach((payoutWell) => {\n      if (payoutWell[\"Well Name\"].includes(selectedOption)) {\n        payout100 = payoutWell[\"% Payout\"] * 100;\n      }\n    });\n    //DISPLAY ECONOMICS DATA\n    if (region != \"ET\"){\n      document.getElementById(\"payout\").innerHTML =\n      \"Payout : \" + payout100.toFixed(0).toLocaleString(\"en-US\") + \"%\";\n    //document.getElementById(\"payout100\").innerHTML = payout100.toFixed(0).toLocaleString(\"en-US\")+ \"%\";\n\n    }\n    \n  });\n\n  d3.json(\"../data/allProductionData\"+region+\".json\").then((data) => {\n\n    var site_oil = [];\n    var site_gas = [];\n    var site_water = [];\n    var site_date = [];\n    var comments = [];\n    var movingAverage = [];\n    let water_cut = [];\n\n    data.forEach((site) => {\n      if (site[0] === selectedOption) {\n        site_date.push(site[9]);\n        site_oil.push(site[2]);\n        site_gas.push(site[3]);\n        site_water.push(site[4]);\n        comments.push(site[7]);\n        movingAverage.push(site[8]);\n        water_cut.push((site[4] / (site[4] + site[2])) * 100);\n      }\n    });\n\n    if (timeFrame > 0) {\n      var site_date = site_date.slice(0, timeFrame);\n      var site_oil = site_oil.slice(0, timeFrame);\n      var site_gas = site_gas.slice(0, timeFrame);\n      var site_water = site_water.slice(0, timeFrame);\n      var comments = comments.slice(0, timeFrame);\n      var movingAverage = movingAverage.slice(0, timeFrame);\n    }\n    const config = {\n      modeBarButtonsToRemove: [\n        \"sendDataToCloud\",\n        \"autoScale2d\",\n        \"hoverClosestCartesian\",\n        \"hoverCompareCartesian\",\n        \"lasso2d\",\n        \"zoomIn2d\",\n        \"zoomOut2d\",\n        \"toggleSpikelines\",\n      ],\n      displaylogo: false,\n      responsive: true,\n    }; //, 'select2d' , 'zoom2d'\n\n    var dataOilnorm = {\n      x: site_date,\n      y: site_oil,\n      text: comments,\n      name: \"Oil\",\n      line: { color: \"green\" },\n    };\n\n    var dataOilmoving = {\n      x: site_date,\n      y: movingAverage,\n      type: \"line\",\n      name: \"7 Day Avg\",\n      line: { dash: \"dot\" },\n    };\n\n    var dataGas = {\n      x: site_date,\n      y: site_gas,\n      type: \"line\",\n      name: \"Gas [Mcf]\",\n      line: { color: \"red\" },\n    };\n    var dataWater = {\n      x: site_date,\n      y: site_water,\n      type: \"line\",\n      name: \"Water [Mbw]\",\n      line: { color: \"blue\" },\n    };\n    let dataCut = [\n      {\n        x: site_date,\n        y: water_cut,\n        line: { color: \"#25C4DC\" },\n      },\n    ];\n\n    var layoutCut = {\n      autosize: true,\n      title: { text: \"Water Cut Percentage\" },\n      yaxis: {\n        type: \"linear\",\n        autorange: true,\n        tickformat: \"f\",\n      },\n      xaxis: {\n        gridcolor: \"#dbdbdb\",\n      },\n    };\n    var layoutLog = {\n      title: \"Fluids Produced vs Times\",\n      yaxis: {\n        type: \"log\",\n        range: [0, 3],\n        tickvals: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000],\n        gridcolor: \"#dbdbdb\",\n      },\n      xaxis: {\n        gridcolor: \"#dbdbdb\",\n      },\n    };\n\n    var layoutOil = {\n      title: \"Oil (BOPD) vs Time\",\n      yaxis: {\n        type: scale,\n        rangemode: \"tozero\",\n        autorange: true,\n        gridcolor: \"#dbdbdb\",\n      },\n      xaxis: {\n        gridcolor: \"#dbdbdb\",\n      },\n      legend: {\n        x: 1,\n        xanchor: \"right\",\n        y: 1.2,\n      },\n    };\n    var layoutGas = {\n      title: \"Gas (MCFD) vs Time\",\n      yaxis: {\n        type: scale,\n        rangemode: \"tozero\",\n        gridcolor: \"#dbdbdb\",\n      },\n      xaxis: {\n        gridcolor: \"#dbdbdb\",\n      },\n    };\n    var layoutWater = {\n      title: \"Water (BWPD) vs Time\",\n      yaxis: {\n        type: scale,\n        rangemode: \"tozero\",\n        gridcolor: \"#dbdbdb\",\n      },\n      xaxis: {\n        gridcolor: \"#dbdbdb\",\n      },\n    };\n\n    //var dataOil = [dataOilnorm, dataOilmoving];\n    //var fluidData = [dataOilnorm, dataGas, dataWater]\n\n    if (scale == \"log\") {\n      //Plotly.newPlot(\"fluidCurve\", fluidData, layoutLog, config);\n      Plotly.newPlot(\"oilDeclineCurve\", [dataOilnorm, dataOilmoving], layoutLog, {\n        showSendToCloud: true,\n      });\n      Plotly.newPlot(\"gasDeclineCurve\", [dataGas], layoutLog, config);\n      Plotly.newPlot(\"waterDeclineCurve\", [dataWater], layoutLog, config);\n    } else {\n      //Plotly.newPlot(\"fluidCurve\", fluidData, layoutOver, config);\n      Plotly.newPlot(\"oilDeclineCurve\", [dataOilnorm, dataOilmoving], layoutOil, config);\n      Plotly.newPlot(\"gasDeclineCurve\", [dataGas], layoutGas, config);\n      Plotly.newPlot(\"waterDeclineCurve\", [dataWater], layoutWater, config);\n    }\n    Plotly.newPlot(\"waterCutCurve\", dataCut, layoutCut, config);\n\n    //Display oil production based on zoom\n    document\n      .getElementById(\"oilDeclineCurve\")\n      .on(\"plotly_relayout\", function (eventdata) {\n        JSON.stringify(eventdata);\n        site_date.forEach((i, el) => {\n          site_date[el] = site_date[el].substring(0, 10);\n        }); //newer dates are at beginning of array\n\n        let indexStart;\n        let indexEnd;\n        if (eventdata[\"xaxis.range[0]\"] == null) {\n          //dbl clicked\n          indexStart = site_date.length - 1;\n          indexEnd = 0;\n        } else if (\n          //zoomed where no data\n          site_date.indexOf(eventdata[\"xaxis.range[0]\"].substring(0, 10)) == -1\n        ) {\n          indexStart = site_date.length - 1;\n          indexEnd = site_date.indexOf(\n            eventdata[\"xaxis.range[1]\"].substring(0, 10)\n          );\n        } else {\n          indexStart = site_date.indexOf(\n            eventdata[\"xaxis.range[0]\"].substring(0, 10)\n          );\n          indexEnd = site_date.indexOf(\n            eventdata[\"xaxis.range[1]\"].substring(0, 10)\n          );\n        }\n\n        function calc(array, i1, i2) {\n          let tot = 0;\n\n          array.slice(i1, i2 + 1).forEach((el) => {\n            tot += el;\n          });\n          \n          return tot;\n        }\n\n        let sum = calc(site_oil, indexEnd, indexStart);\n        xx = \"Produced: \";\n        document.getElementById(\"zoomOil\").innerHTML =\n          xx +\n          (sum / 1000).toFixed(1) +\n          \" MBO, from \" +\n          site_date[indexStart] +\n          \" to \" +\n          site_date[indexEnd];\n        document.getElementById(\"zoomOil\").style.visibility = \"visible\";\n      });\n\n    document.getElementById(\"siteSelection\").focus();\n    document.getElementById(\"filler4\").style.display = \"none\";\n    d3.json(\"../data/cumProd.json\").then((cumData) => {\n      let selectedWellCum = 0;\n      let selectedWellGasCum = 0;\n      let selectedWellWaterCum;\n      let selectedWellFormation = \"\";\n      let totalWater = Math.round(\n        site_water.reduce((partialSum, a) => partialSum + a, 0) / 1000\n      ); //updates when time frame changes\n\n      cumData.forEach((wellCum) => {\n        if (selectedOption === wellCum[0]) {\n          selectedWellCum = wellCum[1];\n          selectedWellGasCum = wellCum[3];\n          selectedWellWaterCum = wellCum[2];\n          selectedWellFormation = wellCum[4];\n        }\n      });\n      if (selectedWellFormation == \"\") {\n        document.getElementById(\"filler4\").style.display = \"\";\n      }\n\n      document.getElementById(\"formation\").innerHTML = selectedWellFormation;\n      document.getElementById(\"cumlativeData\").innerHTML =\n        \"Cumulative: \" +\n        selectedWellCum +\n        \" MBO, \" +\n        selectedWellGasCum +\n        \" MMCF, \" +\n        (selectedWellWaterCum + \" MBW\");\n    });\n  });\n}\n\n//Creates Table//\nasync function table() {\n  //SELECT <select> TO LATER \"GRAB\" THE SELECTION MADE AS TEXTS\n  var dropdownMenu = d3.select(\"#siteSelection\").node();\n  //DECLARE ITEM SAVED IN STORAGE\n  var clickedFromAnalyzed = sessionStorage.getItem(\"siteSelection\");\n  //DECLARE WHAT WILL BE SAVED AS THE SELECTION\n  let selectedOption;\n  //USE TO DETERMINE SELECTION USED TO CREATE TABLE\n  if (clickedFromAnalyzed == null) {\n    //IF NOTHING IN STORAGE USE dropdown.value TO CREATE TABLE\n    selectedOption = dropdownMenu.value;\n  } else {\n    //IF STORAGE IS NOT NULL, TEXT IN STORAGE IS USED TO CREATE TABLE\n    selectedOption = clickedFromAnalyzed;\n  }\n  //READ IN FILE WITH DATA FOR TABLE\n  let tableData = await d3.json(\"../data/allProductionData\"+region+\".json\");\n  buildTable(tableData)\n  function buildTable(allData) {\n    tbody = d3.select(\"tbody\");\n    tbody.html(\"\");\n    if (selectedOption == \"default\"){\n      selectedOption = \"Aaron #1\"\n    }\n    allData.forEach((well) => {\n      if (well[0] == selectedOption){\n        well.shift()\n        well.splice(well.length-2,2)\n  \n        let row = tbody.append(\"tr\");\n        Object.values(well).forEach((val) => {\n        let cell = row.append(\"td\");\n        cell.text(val);\n      });\n        \n      }\n      \n    });\n    document.getElementById(\"individualTable\").style.display = \"inline-block\"\n    document.getElementById(\"oilDeclineCurve\").style.display = \"none\"\n    document.getElementById(\"gasDeclineCurve\").style.display = \"none\"\n    document.getElementById(\"waterDeclineCurve\").style.display = \"none\"\n    document.getElementById(\"waterCutCurve\").style.display = \"none\"\n  }\n}\n\n//Main//\ncreateDropdownOptions();\nd3.select(\"#siteSelection\").on(\"change\", () => {\n  setActive(\"linear\", \"Days30\");\n  Curve(31);\n});\n//Graph LISTENERS//\nd3.select(\"#linear\").on(\"click\", () => {\n  setActive(\"linear\", \"DaysInception\");\n  Curve(0);\n});\nd3.select(\"#logarithmic\").on(\"click\", () => {\n  setActive(\"logarithmic\", \"DaysInception\");\n  Curve(0);\n});\nd3.select(\"#DaysInception\").on(\"click\", () => {\n  setActiveTime(\"DaysInception\");\n  Curve(0);\n});\nd3.select(\"#Days30\").on(\"click\", () => {\n  setActiveTime(\"Days30\");\n  Curve(31);\n});\nd3.select(\"#Days180\").on(\"click\", () => {\n  setActiveTime(\"Days180\");\n  Curve(181);\n});\nd3.select(\"#Days365\").on(\"click\", () => {\n  setActiveTime(\"Days365\");\n  Curve(366);\n});\n\n//TABLE LISTENER//\nd3.select(\"#table\").on(\"click\", () => {\n  setActive(\"table\", \"DaysInception\");\n  table();\n});\n\n//init page on load//\nwindow.on(\"load\", setActive(\"linear\", \"DaysInception\"), Curve(0));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/curves.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/curves.js"]();
/******/ 	
/******/ })()
;