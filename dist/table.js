/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/table.js":
/*!**********************!*\
  !*** ./src/table.js ***!
  \**********************/
/***/ (() => {

eval("// Cumulative production\nlet region = document.getElementById(\"region\").textContent;\nasync function tableOnLoad() {\n  let tableData = await d3.json(\"../data/cumProd\"+region+\".json\");\n  if (region != \"ET\"){\n    let payData = await d3.json(\"../data/payouts.json\");\n    \n    payData.forEach((pay) => {\n      tableData.forEach((well) => {\n        if (well[0] == pay[\"Well Name\"]) {\n          well.push(pay[\"% Payout\"]);\n        }\n      });\n    });\n    //switch places of prodData[3] and prodData[4]\n    tableData.forEach((well) => {\n      let temp = well[4];\n      well[4] = well[5];\n      well[5] = temp;\n    });\n    tableData.forEach((well) => {\n      well[4] = 100 * well[4];\n      well[4] = Number(well[4]).toFixed(2);\n    });\n  }\n  \n\n  \n\n  //global declaration of tbody, since it will be accessed in and out of functions\n  tbody = d3.select(\"tbody\");\n\n  function createDropdownOptions() {\n    var partnerSelector = d3.select(\"#siteFilter\"); //SELECT <select> WHERE PARTNER NAMES WILL APPEAR\n    d3.json(\"../data/allProductionData\"+region+\".json\").then((allData) => {\n      //READ IN JSON FILE COINTAING ALL PARTNER'S NAMES\n      repeatedWells = []; //EMPTY ARRAY TO CONTAIN ALL PARTNER'S NAME (REPEATED)\n      allData.forEach((row) => {\n        //LOOP THROUGH NET_INTEREST FILE\n        repeatedWells.push(row[0]); //PUSH ALL PARTNER'S NAME TO LIST\n      });\n      wells = [...new Set(repeatedWells)].sort();\n      wells.forEach((well) => {\n        partnerSelector.append(\"option\").text(well).property(\"Value\", well);\n      });\n    });\n  }\n\n  function handleClick() {\n    // the value entered in the sitename filter becomes the value for the siteName variable\n    let requestedSiteName = d3.select(\"#siteFilter\").property(\"value\");\n    // set data be filtered to imported data (the data ready to be filtered)\n    let filteredData = tableData;\n    if (requestedSiteName) {\n      filteredData = filteredData.filter((row) => row[0] == requestedSiteName);\n      console.log(filteredData);\n    }\n    //build table using the filteredData variable\n    buildTable(filteredData);\n  }\n  createDropdownOptions();\n  buildTable(tableData);\n  //create listener for when user wants to filter data\n  d3.selectAll(\"#siteFilter\").on(\"change\", handleClick);\n}\n\nasync function sortByProd() {\n  event.preventDefault();\n  let allData = await d3.json(\"../data/cumProd\"+region+\".json\");\n  let payData = await d3.json(\"../data/payouts.json\");\n\n  payData.forEach((pay) => {\n    allData.forEach((well) => {\n      if (well[0] == pay[\"Well Name\"]) {\n        well.push(pay[\"% Payout\"]);\n      }\n    });\n  });\n  //switch places of prodData[3] and prodData[4]\n  allData.forEach((well) => {\n    let temp = well[4];\n    well[4] = well[5];\n    well[5] = temp;\n  });\n  allData.forEach((well) => {\n    well[4] = 100 * well[4];\n    well[4] = Number(well[4]).toFixed(2);\n  });\n\n  allData.sort((a, b) => {\n    //sorts data high to low by oil production\n    const aVal = a[1];\n    const bVal = b[1];\n    return bVal - aVal;\n  });\n\n  buildTable(allData);\n}\nasync function sortByPay() {\n  event.preventDefault();\n  let prodData = await d3.json(\"../data/cumProd\"+region+\".json\");\n  let payData = await d3.json(\"../data/payouts.json\");\n  //add % payout from payData to prodData\n  payData.forEach((pay) => {\n    prodData.forEach((well) => {\n      if (well[0] == pay[\"Well Name\"]) {\n        well.push(pay[\"% Payout\"]);\n      }\n    });\n  });\n  \n  //switch places of prodData[3] and prodData[4]\n  prodData.forEach((well) => {\n    let temp = well[4];\n    well[4] = well[5];\n    well[5] = temp;\n  });\n  prodData.forEach((well) => {\n    if (well[4] == null) {\n      well[4] = 0;\n    }\n  });\n  prodData.forEach((well) => {\n    well[4] = 100 * well[4];\n    well[4] = Number(well[4]).toFixed(2);\n  });\n\n  prodData.sort((a, b) => {\n    const aVal = a[4];\n    const bVal = b[4];\n    return bVal - aVal;\n  });\n  //prodData.unshift([\"Well Name\", \"Oil (MBO)\",\"Gas (MMCF)\",\"Water (MBW)\", \"% Payout\", \"Formation\"]);\n\n  buildTable(prodData);\n}\n\nfunction buildTable(allData) {\n  tbody.html(\"\");\n  allData.forEach((well) => {\n    let row = tbody.append(\"tr\");\n    //console.log(well)\n\n    Object.values(well).forEach((val) => {\n      let cell = row.append(\"td\");\n      cell.text(val);\n    });\n  });\n}\nd3.select(\"#Prodfilter\").on(\"click\", function () {\n  sortByProd();\n});\nd3.select(\"#Payfilter\").on(\"click\", function () {\n  sortByPay();\n});\nwindow.onload = tableOnLoad();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGFibGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGFibGUuanM/ZWU3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDdW11bGF0aXZlIHByb2R1Y3Rpb25cbmxldCByZWdpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ2lvblwiKS50ZXh0Q29udGVudDtcbmFzeW5jIGZ1bmN0aW9uIHRhYmxlT25Mb2FkKCkge1xuICBsZXQgdGFibGVEYXRhID0gYXdhaXQgZDMuanNvbihcIi4uL2RhdGEvY3VtUHJvZFwiK3JlZ2lvbitcIi5qc29uXCIpO1xuICBpZiAocmVnaW9uICE9IFwiRVRcIil7XG4gICAgbGV0IHBheURhdGEgPSBhd2FpdCBkMy5qc29uKFwiLi4vZGF0YS9wYXlvdXRzLmpzb25cIik7XG4gICAgXG4gICAgcGF5RGF0YS5mb3JFYWNoKChwYXkpID0+IHtcbiAgICAgIHRhYmxlRGF0YS5mb3JFYWNoKCh3ZWxsKSA9PiB7XG4gICAgICAgIGlmICh3ZWxsWzBdID09IHBheVtcIldlbGwgTmFtZVwiXSkge1xuICAgICAgICAgIHdlbGwucHVzaChwYXlbXCIlIFBheW91dFwiXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vc3dpdGNoIHBsYWNlcyBvZiBwcm9kRGF0YVszXSBhbmQgcHJvZERhdGFbNF1cbiAgICB0YWJsZURhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgICAgbGV0IHRlbXAgPSB3ZWxsWzRdO1xuICAgICAgd2VsbFs0XSA9IHdlbGxbNV07XG4gICAgICB3ZWxsWzVdID0gdGVtcDtcbiAgICB9KTtcbiAgICB0YWJsZURhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgICAgd2VsbFs0XSA9IDEwMCAqIHdlbGxbNF07XG4gICAgICB3ZWxsWzRdID0gTnVtYmVyKHdlbGxbNF0pLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gIH1cbiAgXG5cbiAgXG5cbiAgLy9nbG9iYWwgZGVjbGFyYXRpb24gb2YgdGJvZHksIHNpbmNlIGl0IHdpbGwgYmUgYWNjZXNzZWQgaW4gYW5kIG91dCBvZiBmdW5jdGlvbnNcbiAgdGJvZHkgPSBkMy5zZWxlY3QoXCJ0Ym9keVwiKTtcblxuICBmdW5jdGlvbiBjcmVhdGVEcm9wZG93bk9wdGlvbnMoKSB7XG4gICAgdmFyIHBhcnRuZXJTZWxlY3RvciA9IGQzLnNlbGVjdChcIiNzaXRlRmlsdGVyXCIpOyAvL1NFTEVDVCA8c2VsZWN0PiBXSEVSRSBQQVJUTkVSIE5BTUVTIFdJTEwgQVBQRUFSXG4gICAgZDMuanNvbihcIi4uL2RhdGEvYWxsUHJvZHVjdGlvbkRhdGFcIityZWdpb24rXCIuanNvblwiKS50aGVuKChhbGxEYXRhKSA9PiB7XG4gICAgICAvL1JFQUQgSU4gSlNPTiBGSUxFIENPSU5UQUlORyBBTEwgUEFSVE5FUidTIE5BTUVTXG4gICAgICByZXBlYXRlZFdlbGxzID0gW107IC8vRU1QVFkgQVJSQVkgVE8gQ09OVEFJTiBBTEwgUEFSVE5FUidTIE5BTUUgKFJFUEVBVEVEKVxuICAgICAgYWxsRGF0YS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgLy9MT09QIFRIUk9VR0ggTkVUX0lOVEVSRVNUIEZJTEVcbiAgICAgICAgcmVwZWF0ZWRXZWxscy5wdXNoKHJvd1swXSk7IC8vUFVTSCBBTEwgUEFSVE5FUidTIE5BTUUgVE8gTElTVFxuICAgICAgfSk7XG4gICAgICB3ZWxscyA9IFsuLi5uZXcgU2V0KHJlcGVhdGVkV2VsbHMpXS5zb3J0KCk7XG4gICAgICB3ZWxscy5mb3JFYWNoKCh3ZWxsKSA9PiB7XG4gICAgICAgIHBhcnRuZXJTZWxlY3Rvci5hcHBlbmQoXCJvcHRpb25cIikudGV4dCh3ZWxsKS5wcm9wZXJ0eShcIlZhbHVlXCIsIHdlbGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICAvLyB0aGUgdmFsdWUgZW50ZXJlZCBpbiB0aGUgc2l0ZW5hbWUgZmlsdGVyIGJlY29tZXMgdGhlIHZhbHVlIGZvciB0aGUgc2l0ZU5hbWUgdmFyaWFibGVcbiAgICBsZXQgcmVxdWVzdGVkU2l0ZU5hbWUgPSBkMy5zZWxlY3QoXCIjc2l0ZUZpbHRlclwiKS5wcm9wZXJ0eShcInZhbHVlXCIpO1xuICAgIC8vIHNldCBkYXRhIGJlIGZpbHRlcmVkIHRvIGltcG9ydGVkIGRhdGEgKHRoZSBkYXRhIHJlYWR5IHRvIGJlIGZpbHRlcmVkKVxuICAgIGxldCBmaWx0ZXJlZERhdGEgPSB0YWJsZURhdGE7XG4gICAgaWYgKHJlcXVlc3RlZFNpdGVOYW1lKSB7XG4gICAgICBmaWx0ZXJlZERhdGEgPSBmaWx0ZXJlZERhdGEuZmlsdGVyKChyb3cpID0+IHJvd1swXSA9PSByZXF1ZXN0ZWRTaXRlTmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhmaWx0ZXJlZERhdGEpO1xuICAgIH1cbiAgICAvL2J1aWxkIHRhYmxlIHVzaW5nIHRoZSBmaWx0ZXJlZERhdGEgdmFyaWFibGVcbiAgICBidWlsZFRhYmxlKGZpbHRlcmVkRGF0YSk7XG4gIH1cbiAgY3JlYXRlRHJvcGRvd25PcHRpb25zKCk7XG4gIGJ1aWxkVGFibGUodGFibGVEYXRhKTtcbiAgLy9jcmVhdGUgbGlzdGVuZXIgZm9yIHdoZW4gdXNlciB3YW50cyB0byBmaWx0ZXIgZGF0YVxuICBkMy5zZWxlY3RBbGwoXCIjc2l0ZUZpbHRlclwiKS5vbihcImNoYW5nZVwiLCBoYW5kbGVDbGljayk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNvcnRCeVByb2QoKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGxldCBhbGxEYXRhID0gYXdhaXQgZDMuanNvbihcIi4uL2RhdGEvY3VtUHJvZFwiK3JlZ2lvbitcIi5qc29uXCIpO1xuICBsZXQgcGF5RGF0YSA9IGF3YWl0IGQzLmpzb24oXCIuLi9kYXRhL3BheW91dHMuanNvblwiKTtcblxuICBwYXlEYXRhLmZvckVhY2goKHBheSkgPT4ge1xuICAgIGFsbERhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgICAgaWYgKHdlbGxbMF0gPT0gcGF5W1wiV2VsbCBOYW1lXCJdKSB7XG4gICAgICAgIHdlbGwucHVzaChwYXlbXCIlIFBheW91dFwiXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICAvL3N3aXRjaCBwbGFjZXMgb2YgcHJvZERhdGFbM10gYW5kIHByb2REYXRhWzRdXG4gIGFsbERhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgIGxldCB0ZW1wID0gd2VsbFs0XTtcbiAgICB3ZWxsWzRdID0gd2VsbFs1XTtcbiAgICB3ZWxsWzVdID0gdGVtcDtcbiAgfSk7XG4gIGFsbERhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgIHdlbGxbNF0gPSAxMDAgKiB3ZWxsWzRdO1xuICAgIHdlbGxbNF0gPSBOdW1iZXIod2VsbFs0XSkudG9GaXhlZCgyKTtcbiAgfSk7XG5cbiAgYWxsRGF0YS5zb3J0KChhLCBiKSA9PiB7XG4gICAgLy9zb3J0cyBkYXRhIGhpZ2ggdG8gbG93IGJ5IG9pbCBwcm9kdWN0aW9uXG4gICAgY29uc3QgYVZhbCA9IGFbMV07XG4gICAgY29uc3QgYlZhbCA9IGJbMV07XG4gICAgcmV0dXJuIGJWYWwgLSBhVmFsO1xuICB9KTtcblxuICBidWlsZFRhYmxlKGFsbERhdGEpO1xufVxuYXN5bmMgZnVuY3Rpb24gc29ydEJ5UGF5KCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBsZXQgcHJvZERhdGEgPSBhd2FpdCBkMy5qc29uKFwiLi4vZGF0YS9jdW1Qcm9kXCIrcmVnaW9uK1wiLmpzb25cIik7XG4gIGxldCBwYXlEYXRhID0gYXdhaXQgZDMuanNvbihcIi4uL2RhdGEvcGF5b3V0cy5qc29uXCIpO1xuICAvL2FkZCAlIHBheW91dCBmcm9tIHBheURhdGEgdG8gcHJvZERhdGFcbiAgcGF5RGF0YS5mb3JFYWNoKChwYXkpID0+IHtcbiAgICBwcm9kRGF0YS5mb3JFYWNoKCh3ZWxsKSA9PiB7XG4gICAgICBpZiAod2VsbFswXSA9PSBwYXlbXCJXZWxsIE5hbWVcIl0pIHtcbiAgICAgICAgd2VsbC5wdXNoKHBheVtcIiUgUGF5b3V0XCJdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIFxuICAvL3N3aXRjaCBwbGFjZXMgb2YgcHJvZERhdGFbM10gYW5kIHByb2REYXRhWzRdXG4gIHByb2REYXRhLmZvckVhY2goKHdlbGwpID0+IHtcbiAgICBsZXQgdGVtcCA9IHdlbGxbNF07XG4gICAgd2VsbFs0XSA9IHdlbGxbNV07XG4gICAgd2VsbFs1XSA9IHRlbXA7XG4gIH0pO1xuICBwcm9kRGF0YS5mb3JFYWNoKCh3ZWxsKSA9PiB7XG4gICAgaWYgKHdlbGxbNF0gPT0gbnVsbCkge1xuICAgICAgd2VsbFs0XSA9IDA7XG4gICAgfVxuICB9KTtcbiAgcHJvZERhdGEuZm9yRWFjaCgod2VsbCkgPT4ge1xuICAgIHdlbGxbNF0gPSAxMDAgKiB3ZWxsWzRdO1xuICAgIHdlbGxbNF0gPSBOdW1iZXIod2VsbFs0XSkudG9GaXhlZCgyKTtcbiAgfSk7XG5cbiAgcHJvZERhdGEuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGFWYWwgPSBhWzRdO1xuICAgIGNvbnN0IGJWYWwgPSBiWzRdO1xuICAgIHJldHVybiBiVmFsIC0gYVZhbDtcbiAgfSk7XG4gIC8vcHJvZERhdGEudW5zaGlmdChbXCJXZWxsIE5hbWVcIiwgXCJPaWwgKE1CTylcIixcIkdhcyAoTU1DRilcIixcIldhdGVyIChNQlcpXCIsIFwiJSBQYXlvdXRcIiwgXCJGb3JtYXRpb25cIl0pO1xuXG4gIGJ1aWxkVGFibGUocHJvZERhdGEpO1xufVxuXG5mdW5jdGlvbiBidWlsZFRhYmxlKGFsbERhdGEpIHtcbiAgdGJvZHkuaHRtbChcIlwiKTtcbiAgYWxsRGF0YS5mb3JFYWNoKCh3ZWxsKSA9PiB7XG4gICAgbGV0IHJvdyA9IHRib2R5LmFwcGVuZChcInRyXCIpO1xuICAgIC8vY29uc29sZS5sb2cod2VsbClcblxuICAgIE9iamVjdC52YWx1ZXMod2VsbCkuZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICBsZXQgY2VsbCA9IHJvdy5hcHBlbmQoXCJ0ZFwiKTtcbiAgICAgIGNlbGwudGV4dCh2YWwpO1xuICAgIH0pO1xuICB9KTtcbn1cbmQzLnNlbGVjdChcIiNQcm9kZmlsdGVyXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICBzb3J0QnlQcm9kKCk7XG59KTtcbmQzLnNlbGVjdChcIiNQYXlmaWx0ZXJcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gIHNvcnRCeVBheSgpO1xufSk7XG53aW5kb3cub25sb2FkID0gdGFibGVPbkxvYWQoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/table.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/table.js"]();
/******/ 	
/******/ })()
;